@page "/Articles/Manage"

@using ArticleApp.Models

@inject IArticleRepository ArticleRepository

@using Dul.Domain.Common
@using Dul.Web

@using ArticleApp.Pages.Articles.Component

@inject IJSRuntime JSRuntime

<h3>Manage</h3>

<div>
    <a href="/Articles/Create" class="btn btn-primary">Create(Page)</a>
    <input type="button" value="Create(Model)" class="btn btn-primary" data-toggle="modal" data-target="#articleEditDialog"
           @onclick="btnCreate_Click" />
</div>

@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="bg-dark" style="color:white">
            <tr style="text-align:center">
                <th>ID</th>
                <th>Title</th>
                <th>Created</th>
                <th>&nbsp;</th>
                <th>IsPinned</th>
                <th>&nbsp;</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td style="text-align:center">@article.Id</td>
                    <td>@article.Title</td>
                    <td>@article.Created.ToShortTimeString()</td>
                    <td>
                        <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                        <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                        <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                    </td>
                    <td style="text-align:center; color:red; font-weight:bold">@(article.IsPinned ? "공지" : "")</td>
                    <td>
                        <input type="button" value="공지글로 올리기" class="btn btn-light" @onclick="@(()=>PinnedBy(article))" />
                    </td>
                    <td>
                        <input type="button" value="Edit" class="btn btn-danger" data-toggle="modal" data-target="#articleEditDialog"
                               @onclick="(()=> EditeBy(article))" />
                    </td>
                    <td>
                        <input type="button" value="Delete" class="btn btn-danger" data-toggle="modal" data-target="#articleDeleteDialog"
                        @onclick="(()=> DeleteBy(article))"/>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ArticlePager Model="pager" PageIndexChanged="PageIndexChanged"></ArticlePager>

@if (isDeleteShow)
{
    <ArticleDeleteDialog OnClick="btnDelete_Click" IsClosed="btnDeleteClose_Click"></ArticleDeleteDialog>
}

@if (isEditShow)
{
    <ArticleEditorForm Model="@_article" SaveOrUpdated="SaveOrUpdate" IsClosed="btnEditClose_Click">
        <EditorFormTitle>@editorFormTitle</EditorFormTitle>
    </ArticleEditorForm>
}

@if (isShow)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">공지글로 올리기</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="btnClose_Click">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>[ @(_article.Id) ] 번 글을 공지글로 설정할까요?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
                    <button type="button" class="btn btn-secondary" @onclick="btnClose_Click">취소</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool isCreate = false;
    private void btnCreate_Click()
    {
        isCreate = true; // 창 열기
        editorFormTitle = "글쓰기";
        _article = new Article();
    }


    private string editorFormTitle = "";
    private bool isEditShow = false; // Notice Modal
    private void EditeBy(Article article)
    {
        isEditShow = true;
        editorFormTitle = "수정하기";
        _article = article;
        StateHasChanged();
    }

    /// <summary>
    /// 저장 또는 수정 후 데이터 다시 읽어오기
    /// </summary>
    private async void SaveOrUpdate()
    {
        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        isEditShow = false;

        StateHasChanged();
    }

    /// <summary>
    /// 모달 창 닫기
    /// </summary>
    private void btnEditClose_Click()
    {
        isEditShow = false; // 창 닫기
        _article = new Article(); // 선택했던 모델 초기화
        StateHasChanged();
    }


    private bool isDeleteShow = false;
    // 자바스크립트 모달폼 사용해서 삭제
    private void DeleteBy(Article article)
    {
        isDeleteShow = true;
        _article = article;
        StateHasChanged();
    }

    /// <summary>
    /// 모달 창 닫기
    /// </summary>
    private void btnDeleteClose_Click()
    {
        isDeleteShow=false;
        _article = new Article();
        StateHasChanged();
    }


    private async void btnDelete_Click()
    {
        await ArticleRepository.DeleteArticleAsync(_article.Id);
        await JSRuntime.InvokeAsync<object>("closeModal", "articleDeleteDialog");
        _article = new Article(); // 선택 항목 초기화

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();
        
        isDeleteShow = false;

        StateHasChanged();
    }

  

    /* 공지사항 모달 */
    private Article _article = new Article(); // 선택한 항목 관리

    private bool isShow = false; // Notice Modal
    

    /// <summary>
    /// 모달창 열때
    /// </summary>
    /// <param name="article"></param>
    private void PinnedBy(Article article)
    {
        _article = article; // 모델 선택
        isShow = true; // 창열기

        //JSRuntime.InvokeAsync<object>("alert", $"{article.Id}를 공지글로 설정하시겠습니까?");
    }

    /// <summary>
    /// 모달 창 닫기
    /// </summary>
    private void btnClose_Click()
    {
        isShow = false; // 창 닫기
        _article = new Article(); // 선택했던 모델 초기화
    }

    /// <summary>
    /// 공지글로 올리기
    /// </summary>
    private async void btnTogglePinned_Click()
    {
        _article.IsPinned = !_article.IsPinned; // Toggle

        await ArticleRepository.EditArticleAsync(_article); // DB Update

        isShow = false; // 모달창 닫기

        // 다시한번 가져오기
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드들

        StateHasChanged();
    }
    /* 공지사항 모달 */

    // 페이저 기본값 설정
    private PagerBase pager = new PagerBase()
        {
            PageNumber = 1,
            PageIndex = 0,
            PageSize = 2,
            PagerButtonCount = 3
        };

    private List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        // [1] 전체 데이터 모두 출력
        //articles = await ArticleRepository.GetArticleAsync();

        // [2] 페이징 처리된 데이터만 출력
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);

        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드들
    }

    // Pager 버튼 클릭 콜백 메서드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 총 레코드 수
        articles = pagingData.Records.ToList(); // 페이징 처리된 레코드들

        StateHasChanged(); // 현재 컴포넌트 재로드
    }

}
