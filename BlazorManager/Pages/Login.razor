@page "/Login"
@using BlazorManager.Authentication

@inject UserAccountService userAccountService
@inject IJSRuntime JS
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<!-- 로그인 구성요소에 대한 디자인을 포함 -->
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.PassWord" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick=Authenticate class="btn btn-primary">Login</button>
        </div>



    </div>
</div>

@code {
    // 모델 클래스
    private class Model
    {
        public string UserName { get; set; }
        public string PassWord { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName); // 유저 검색
        if (userAccount == null || userAccount.Password != model.PassWord) // 유효성 검사
        {
            // 존재하지 않다면
            await JS.InvokeVoidAsync("alert", "입력정보가 다릅니다");
            return;
        }
        // 존재하다면 인증 상태 공급자를 만듬.
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        navManager.NavigateTo("/", true);
    }
}
