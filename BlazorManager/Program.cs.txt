wwwroot : 정적 파일 저장 폴더
	- wwwroot/css 폴더에 저장된 site.css 파일은 URL을 아래와 같이 지정하면 즉시 제공받을 수 있음
		http://localhost<port>/css/site.css

* HTTPS 사용 강제
	- app.UseHttpsRedirection();
		: Http로 전송되는 문서는 하이퍼 텍스트 문서로 전혀 보안성이 없다.
		  따라서, 현재는 모든 문서를 암호화된 Https 프로토콜을 사용하여 전송하도록 강제하는 추세이다.
		  서버입장에서는 클라이언트가 http로 보낼 지, https로 보낼 지 전혀 알 수가 없다.
		  따라서, 보안되지 않은 http로 돌아온 요청은 https로 전달(Redirect)하는 미들웨어를 사용하면, 보안 문제가 해결된다.
		
		  Https는 연결에 있어서 추가된 규약이 있으므로 http로 전송된 데이터는 모두 서버로 전달될 수 없다. 이 경우, 서버는 에러(307)코드를 클라이언트에게 보내게 된다.

* 정적인 문서 제공
	- app.UseStaticFiles();
		: 웹앱은 문서를 동적으로 생성한다. 그러나, 여전히 정적으로 제공하고자 한다면, 그러한 기능을 하는 미들웨어를 추가하면 된다.

* 경로 결정 미들웨어
	- app.UseRouting();
		: 전달받은 요청의 경로를 파악하는 역할을 한다.
		  이 미들웨어 앞단에 정적인 파일 제공 미들웨어가 있었는데, 정적인 파일 제공 미들웨어가 발견하지 못한 경로에 대한 요청은
		  라우팅 미들웨어로 전달되어 어느 요청 핸들러로 전달될 것인지를 판단하게 된다.

* 요청핸들러 실행 미들웨어
	- app.UseEndpoints(endpoints => {
		endpoints.MapDefaultControllerRoute();
		endpoints.MapRazorPages();
	})
		: 이 미들웨어는 앞단에 있는 경로 미들웨어로 부터 받은 경로 정볼르 바탕으로 요청핸들러를 실행하는 역할을 한다.
		  얼핏 보면 두 개의 미들웨어 역할이 모호하게 느껴질 것이다.
		  요청과 요청 핸들러를 연결하는 것을 두 가지로 구분해 놓은 것은 나름의 인증의 목적 때문이다.
		  클라이언트가 보낸 요청이 인증이 필요한 경우, 요청 핸들러가 실행되기 전에 인증 여부를 파악해야 한다.

		  인증 미들웨어는 경로 결정 미들웨어로부터 받은 경로 정보를 바탕으로 인증이 필요한 경로이면, 인증이 되었는지 확인하는 역할을 수행한다.
		  인증이 되었으면 요청핸들러 실행 미들웨어로 요청을 보내고, 그렇지 않으면 인증 페이지로 연결한다.

		  또한 인증이 완료되었다 하더라도 권한문제가 남아 있다.
		  인증된 사용자라 하더라도 경로에 대한 접근 권한이 없으면 접근을 허락해서는 안된다.
		  이를 위해 권한 미들웨어가 인증 미들웨어와 요청핸들러 실행 미들웨어 사이에 위치하게 된다.
		  권한 미들웨어는 권하이 없는 경로에 대한 접근을 가로막게 된다.



* 개발 환경이 아닐경우 에러 발생시 표시할 페이지 경로
// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}